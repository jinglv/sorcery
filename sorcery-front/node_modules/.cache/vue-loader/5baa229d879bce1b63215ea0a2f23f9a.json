{"remainingRequest":"/Users/lvjing/sorcery/sorcery-front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lvjing/sorcery/sorcery-front/src/views/apis/index.vue?vue&type=style&index=0&id=2081f876&scoped=true&lang=css&","dependencies":[{"path":"/Users/lvjing/sorcery/sorcery-front/src/views/apis/index.vue","mtime":1711068555578},{"path":"/Users/lvjing/sorcery/sorcery-front/node_modules/css-loader/dist/cjs.js","mtime":1658126182715},{"path":"/Users/lvjing/sorcery/sorcery-front/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1658126185846},{"path":"/Users/lvjing/sorcery/sorcery-front/node_modules/postcss-loader/src/index.js","mtime":1658126183210},{"path":"/Users/lvjing/sorcery/sorcery-front/node_modules/cache-loader/dist/cjs.js","mtime":1658126181624},{"path":"/Users/lvjing/sorcery/sorcery-front/node_modules/vue-loader/lib/index.js","mtime":1658126185454}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5jdXN0b20tdHJlZS1ub2RlIHsKICB3aWR0aDogMTAwJTsKfQoubGFiZWwtdGl0bGUgewogIGZvbnQtZmFtaWx5OiAiTGliZXJhdGlvbiBNb25vIiwgbW9ub3NwYWNlLCBzZXJpZiwgc2Fucy1zZXJpZjsKICBmb250LXNpemU6IDI1cHg7Cn0KLmxhYmVsLXRleHQgewogIGZvbnQtZmFtaWx5OiAiTHVjaWRhIENhbGxpZ3JhcGh5IiwgY3Vyc2l2ZSwgc2VyaWYsIHNhbnMtc2VyaWY7CiAgZm9udC1zaXplOiAyMHB4OwogIGZvbnQtd2VpZ2h0OiBib2xkZXI7CiAgZmxvYXQ6IGxlZnQ7CiAgbWFyZ2luLXRvcDogNXB4Owp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/apis","sourcesContent":["<template>\n  <div class=\"api-manage\">\n    <div style=\"text-align: left; margin-top: 10px;\">\n      <el-form :inline=\"true\">\n        <el-form-item label=\"项目:\">\n          <el-select\n            v-model=\"projectValue\"\n            placeholder=\"请选择项目\"\n            @change=\"changeProject\"\n          >\n            <el-option\n              v-for=\"item in projectOption\"\n              :key=\"item.value\"\n              :label=\"item.label\"\n              :value=\"item.value\"\n            />\n          </el-select>\n        </el-form-item>\n        <el-form-item style=\"float: right\">\n          <el-button type=\"primary\" size=\"medium\" @click=\"createApiInfo()\">创建接口</el-button>\n        </el-form-item>\n        <el-form-item style=\"float: right\">\n          <el-button type=\"primary\" size=\"medium\" style=\"margin-left: 35px\" @click=\"createEnv()\">配置环境变量</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n    <div style=\"margin-top: 10px\">\n      <el-card style=\"width: 25%; float: left\" class=\"box-card card-height\" :style=\"conheight\">\n        <el-button\n          class=\"label-title\"\n          type=\"text\"\n          icon=\"el-icon-circle-plus-outline\"\n          @click=\"createRootModule\"\n        >{{ projectLabel }}-模块</el-button>\n        <el-tree\n          :data=\"moduleData\"\n          show-checkbox\n          node-key=\"id\"\n          default-expand-all\n          :expand-on-click-node=\"false\"\n          @node-click=\"nodeClick\"\n        >\n          <span slot-scope=\"{ node, data }\" class=\"custom-tree-node\">\n            <span class=\"label-text\">{{ node.label }}</span>\n            <span style=\"float: right\">\n              <el-button type=\"text\" @click=\"() => append(data)\">\n                <i class=\"el-icon-circle-plus-outline\" />\n              </el-button>\n              <el-button\n                type=\"text\"\n                @click=\"() => remove(node, data)\"\n              >\n                <i class=\"el-icon-delete\" />\n              </el-button>\n            </span>\n          </span>\n        </el-tree>\n      </el-card>\n      <div style=\"width: 74%; float: right\">\n        <el-table\n          :data=\"apiData\"\n          border\n          style=\"width: 100%\"\n        >\n          <el-table-column prop=\"id\" label=\"用例ID\" width=\"100\" />\n          <el-table-column prop=\"apiName\" label=\"用例名称\" width=\"auto\" />\n          <el-table-column prop=\"method\" label=\"请求方法\" width=\"auto\" />\n          <el-table-column prop=\"apiPath\" label=\"API Path\" width=\"auto\" />\n          <el-table-column prop=\"createTime\" label=\"创建时间\" width=\"auto\" />\n          <el-table-column fixed=\"right\" label=\"操作\">\n            <template slot-scope=\"scope\">\n              <el-button\n                type=\"text\"\n                @click=\"caseRowApiInfo(scope.row)\"\n              >查看</el-button>\n              <el-button\n                type=\"text\"\n                @click=\"editRowApiInfo(scope.row)\"\n              >编辑</el-button>\n              <el-button\n                type=\"text\"\n                @click=\"deleteRowApiInfo(scope.row)\"\n              >删除</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n        <!--分页-->\n        <div style=\"width: 100%; text-align: right\">\n          <el-pagination\n            background\n            :total=\"total\"\n            :page-size=\"req.pageSize\"\n            layout=\"total, prev, pager, next\"\n            @current-change=\"handleCurrentChange\"\n          />\n        </div>\n        <!-- 创建模块 -->\n        <module-dialog\n          v-if=\"dialogFlag\"\n          :pid=\"projectValue\"\n          :plabel=\"projectLabel\"\n          :root-id=\"rootFlag\"\n          :parent-obj=\"parentObj\"\n          @cancel=\"closeDialog\"\n        />\n        <!--接口请求信息-->\n        <el-drawer\n          :title=\"apiTitle\"\n          :visible.sync=\"drawer\"\n          direction=\"rtl\"\n          size=\"75%\"\n        >\n          <api-info-dialog v-if=\"drawer\" :title=\"apiTitle\" :mid=\"currentModule\" @close=\"closeDrawer\" />\n        </el-drawer>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport ModuleDialog from '@/views/apis/components/moduleDialog.vue'\nimport ApiInfoDialog from '@/views/apis/components/apiInfoDialog.vue'\nimport { projectAllList } from '@/api/projects'\nimport { apiListByModuleId, deleteApiInfo } from '@/api/apis'\nimport { getModuleTree, deleteModule } from '@/api/modules'\n\nexport default {\n  name: 'ApisModule',\n  components: {\n    ModuleDialog,\n    ApiInfoDialog\n  },\n  data() {\n    return {\n      projectValue: 1,\n      projectLabel: '',\n      rootFlag: true,\n      projectOption: [],\n      moduleData: [],\n      dialogFlag: false,\n      parentObj: {},\n      apiData: [],\n      apiSearchFrom: {\n        apiName: ''\n      },\n      drawer: false,\n      apiTitle: '',\n      currentModule: 0, // 当前选中的模块\n      currentApi: 0, // 当前选中的接口信息\n      dialogEnvsFlag: false,\n      req: {\n        pageNum: 1,\n        pageSize: 10\n      },\n      // 分页页数\n      total: 10,\n      conheight: {\n        height: ''\n      }\n    }\n  },\n  mounted() {\n    this.initProjectAllList()\n  },\n  created() {\n    window.addEventListener('resize', this.getHeight)\n    this.getHeight()\n  },\n  methods: {\n    // 设置卡片高度自适应el-card\n    getHeight() {\n      this.conheight.height = window.innerHeight - 170 + 'px'\n    },\n    // 初始化项目列表\n    async initProjectAllList() {\n      const resp = await projectAllList()\n      if (resp.code === '00000') {\n        this.projectValue = resp.data[0].id\n        this.projectLabel = resp.data[0].projectName\n        // 在初始化项目信息，同时初始化项目下的模块信息\n        this.initModuleList(this.projectValue)\n        for (let i = 0; i < resp.data.length; i++) {\n          this.projectOption.push({\n            value: resp.data[i].id,\n            label: resp.data[i].projectName\n          })\n        }\n        // this.$message.success(\"查询成功！\")\n      } else {\n        this.$message.error('查询失败！')\n      }\n    },\n    // 修改选中项目\n    changeProject(value) {\n      this.projectValue = value\n      this.projectLabel = this.projectOption.find(\n        (item) => item.value === value\n      ).label\n      this.initModuleList(value)\n    },\n    // 查询模块列表\n    async initModuleList(pid) {\n      const resp = await getModuleTree(pid)\n      if (resp.code === '00000') {\n        this.moduleData = resp.data\n        // this.$message.success(\"查询成功！\")\n      } else {\n        this.$message.error('查询失败！')\n      }\n    },\n    // 创建模块子节点\n    append(data) {\n      console.log('创建子节点', data)\n      this.dialogFlag = true\n      this.rootFlag = false\n      this.parentObj = data\n    },\n    // 删除模块\n    remove(node, data) {\n      deleteModule(data.id).then((resp) => {\n        if (resp.code === '00000') {\n          this.$message.success('删除成功！')\n          this.initModuleList(this.projectValue)\n        } else {\n          this.$message.error(resp.msg)\n        }\n      })\n    },\n    // 创建模块\n    createRootModule() {\n      this.dialogFlag = true\n      this.rootFlag = true\n    },\n    // 创建模块关闭\n    closeDialog() {\n      this.dialogFlag = false\n      this.initModuleList(this.projectValue)\n    },\n    nodeClick(data) {\n      this.currentModule = data.id\n      this.getApiList(data.id)\n    },\n    // 获取模块下的接口列表\n    async getApiList(mid) {\n      const resp = await apiListByModuleId(mid, this.req, JSON.stringify(this.apiSearchFrom))\n      if (resp.code === '00000') {\n        this.apiData = resp.data.list\n        this.$message.success('查询成功！')\n      } else {\n        this.$message.error('查询失败！')\n      }\n    },\n    // 创建接口信息\n    createApiInfo() {\n      if (this.currentModule === 0) {\n        this.$message.warning('请选择模块!')\n      } else {\n        this.currentApi = 0\n        this.drawer = true\n        this.apiTitle = '创建接口'\n      }\n    },\n    // 查看接口信息详情\n    caseRowApiInfo(row) {\n      // 点击接口，获取用例id\n      this.currentApi = row.id\n      this.drawer = true\n      this.apiTitle = '接口详情'\n    },\n    // 编辑接口信息\n    editRowApiInfo(row) {\n      // 点击用例，获取用例id\n      this.currentApi = row.id\n      this.drawer = true\n      this.apiTitle = '编辑接口'\n    },\n    // 删除接口信息\n    deleteRowApiInfo(row) {\n      // 点击用例，获取用例id\n      this.currentApi = row.id\n      this.$confirm('删除接口, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning',\n        center: true\n      }).then(() => {\n        const resp = deleteApiInfo(this.currentApi)\n        if (resp.success === true) {\n          this.getCaseList(this.currentModule)\n        } else {\n          this.$message.error(resp.error.msg)\n        }\n        this.$message({\n          type: 'success',\n          message: '删除成功!'\n        })\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消删除'\n        })\n      })\n    },\n    // 跳转到第几页\n    handleCurrentChange(val) {\n      console.log(`当前页: ${val}`)\n      this.req.pageNum = val\n      this.getApiList(this.currentModule)\n    },\n    // 传递子组件，关闭抽屉\n    closeDrawer() {\n      this.drawer = false\n      this.getApiList(this.currentModule)\n    },\n    // 传递子组件，关闭抽屉，刷新列表\n    refreshCaseList() {\n      console.info('currentModule', this.currentModule)\n      this.getApiList(this.currentModule)\n    },\n    // 创建模块\n    createEnv() {\n      this.dialogEnvsFlag = true\n    },\n    // 创建模块关闭\n    closeEnvDialog() {\n      this.dialogEnvsFlag = false\n      this.initModuleList(this.projectValue)\n    }\n  }\n}\n</script>\n<style scoped>\n.custom-tree-node {\n  width: 100%;\n}\n.label-title {\n  font-family: \"Liberation Mono\", monospace, serif, sans-serif;\n  font-size: 25px;\n}\n.label-text {\n  font-family: \"Lucida Calligraphy\", cursive, serif, sans-serif;\n  font-size: 20px;\n  font-weight: bolder;\n  float: left;\n  margin-top: 5px;\n}\n</style>\n"]}]}